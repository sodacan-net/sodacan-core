// pub-sub model: broker (hidden), topic, publisher/producer, subscriber/consumer
// All topics must be declared
// All messages contain a timestamp, a correlationId, and the producer id
// A simple pub-sub topic with no mention of consumers or producers
// Declare topics in one file. Wire them up in a separate file. Then add the 
consumers and producers separately, again.
// Simple topic, no (null) payload
TOPIC offAtBedtime
// Consolidate log output
// A topic used to record log output. Message contains a timestamp, host, and some text
TOPIC log TEXT
// A topic can define one or more message types
TOPIC clock {sunrise,sunset,morning,afternoon,evening,night,daytime,nighttime}
// A sensor produces messages and one ore more control UNITs react. In this case,
// the sensor creates no data, just the event itself. Ex: motion detector.
TOPIC sensor1
TOPIC sunriseSunset {sunrise,sunset}
// Send a timer event when activated
// 
TOPIC timer {set,reset,cancel,expire}
// A, typically repeating, schedule that sends a run message when it's time
// Also handles priorities when there are scheduling conflicts.
TOPIC schedule {set,run,cancel}

// While all messages are asynchronous, some are essentially request/response, the
// response being sent as an independent message. In essence, the message sent contains
// info that says "...and when it's time, send 'this' message back to me."

// Producers can be external, such as devices, with no mention in this language

// Names are in this format: topic.key.value

// All state variables should be sent to this topic for persistence
TOPIC state COMPONENT,KEY,VALUE

TOPIC lamps {on,off,toggle}

PRODUCER clock {day,night,morning,afternoon,evening,night}
  CREATE system.calendar
// Run a program that produces messages
PRODUCER sunriseSunset
  RUN aProgram
PRODUCER lamp1 {on,off}
	console
    
// Consumers can also be internal (same address space)

// A UNIT typically shadows a real-world thing such as pump, light switch, light, etc

// UNIT topic:key 
// A consumer of messages to the topic defined by this unit
// ie UNIT = TOPIC + CONSUMER
// TOPIC lamp1 {toggle}
// CONSUMER lamp1 {toggle}
//  In this unit, {toggle} is a subset of the events supported by the lamps topic.


UNIT lamp1 {toggle}			// Simple lamp controlled by toggle button (toggle event)
  ENUM state {off,on}		// A variable within this unit
  PUBLISH state AS lamp1.state	// Optional but advised
  ON toggle					// Take action when toggle event received
    THEN next(state)		// rotate the state variable

NO: RECEIVE lamp2.toggle FROM http://xxx/lamp2/toggle

// When a message arrives, the first EVENT or AT to evaluate true is executed. This provides a priority
// mechanism.
// After the matching EVENT-THEN or AT-THEN is run, the WHENs are evaluated to determine which to run
// and then the matching WHEN-THENs are run (without reevaluating the WHEN conditions). 
// This helps prevent silly loops and odd side-effects.
UNIT lamp2 {toggle,on,off}					// Lamp with off timer unless movement detected
  LOCAL state {off,on} 	// Declare variable with list of possible values, and...
    THEN state.off		// ...Initialize to off
  LOCAL timer system.timer {reset,start, expire} 	// Create a timer, assign alias

  ON offAtBedtime OR emergencyOff
    WITH state.on
    AND mode.auto
    THEN state.off
  ON lamp2.on 
    WITH state.off
    THEN state.on			// Change state to on
  ON lamp2.off
    WITH state.on
    THEN state.off
  ON sensor1				// We got movement in the room...
    WITH state.on			// ...and the lamp is on...
    THEN timer.reset		// ...reset the timer
  ON lamp2.expire			// If timer expires...
    WITH state.on			// ...and, the light is on...
  	THEN state.off    		// turn light off
  ON lamp2.toggle			// If toggle event arrives...
    WITH state.on			// ... and state is on ...
    THEN state.off			// ... Change state to off
  ON lamp2.toggle			// If toggle toggle event arrives...
    WITH state.off			// ... and state is off ...
    THEN state.on			// ... Change state to on

  WHEN state.on						// When state transitions to on...
    THEN timer.minutes=10			// ...Start a timer
    THEN timer.onExpire=lamp2.expire	// And send us a message when time is up
  WHEN state.off					// When state transitions to off...
    THEN timer.cancel				// ...Cancel the timer
  
  ON state 			//publish updates to state
	SEND lamp.state
	
// Tank level and pump control
// Maintain a mode setting, too
UNIT tank1
  LOCAL mode {off,auto} 	// Declare variable with list of possible values 
    THEN mode.off
  LOCAL level {0.0-1.0}		// A decimal number between 0.0 and 1.0...
    THEN level = 1.0		// ...Initialized to full
  ON tank1.level(value)		// Event tank1.level with formal parameter value
	THEN level = value
  ON tank1.auto
	THEN mode.auto
  ON tank1.off
    WITH NOT mode.off		// not really necessary because the THEN is ignored if mode is already off
	THEN mode.off
  WHEN mode.auto AND level < 0.7 AND pump1.off 
	THEN pump1.on
  WHEN mode.auto AND level > 0.9 AND pump1.on
	THEN pump1.off
  WHEN mode.off AND pump1.on
	THEN pump1.off

// Threshold function compute probability that pump should run
// If tank full, probability is 0.0.
// The emptier the tank, the higher the probability to pump 1.0-tank level
// The emptier the well, the higher the probability 1.0-well level 
// Night time is preferred over daytime night 1.0 day: 0.5
// Avoid Friday nights friday: 0.5 otherwise 1.0

// Model the water supply to the well
GLOBAL aquifer.flowRate 0.5 // GPM
GLOBAL well.capacity 540 // Gallons
GLOBAL well.level ExponentialMovingAverage(10) FilterRange(0.0,1.0) 	// well level is an average over 10 readings
GLOBAL tank1.capacity 750 // Gallons
GLOBAL tank1.level ExponentialMovingAverage(10) FilterRange(0.0,1.0)	// Tank level is an average over 10 readings

// Note: Well levels behave specially: assigning a value adds that value to a rotating collection
// referencing the level returns the moving average.
GLOBAL wellWeight 
// The well holds a lot of water
UNIT well

UNIT wellPump

UNIT domesticTank

// A "simple" tank and pump control
UNIT tank2
  LOCAL mode {off,auto} 	// Declare variable with list of possible values 
    THEN mode.off
  LOCAL level ExponentialMovingAverage(10) FilterRange(0.0,1.0)		// A decimal number between 0.0 and 1.0...
    THEN level = 1.0		// ...Initialized to full
  LOCAL pause {true,false}
    THEN pause.false
  ON tank1.level(value)		// Event tank1.level with formal parameter value
	THEN level = value
  ON tank1.auto				// Auto message causes...
	THEN mode.auto			// ...mode to be auto
  ON tank1.off
    WITH NOT mode.off		// not really necessary because the THEN is ignored if mode is already off
	THEN mode.off
  WHEN mode.auto AND level < 0.7 AND pump1.off AND pause.false
	THEN pump1.on
  WHEN mode.auto AND level > 0.9 AND pump1.on
	THEN pump1.off
  WHEN mode.off AND pump1.on
	THEN pump1.off

// Lighting scenes are managed by a scheduler which sends a message to the eaves when it's time
UNIT eavesControl {off,auto,tick}
  LOCAL mode {off,auto}
    THEN mode.off
  SUBSCRIBE clock{sunrise,sunset,date,time,...}
  ON eavesControl.off
    THEN mode.off
    SEND eaves.off
  ON eavesControl.auto
    THEN mode.auto
  AT sunrise 					// AT is like ON but clock/calendar oriented
	SEND eaves.off				// Ensure the lights are off during the day
  AT sunset ON January 1st		// ON specifies a day
	WITH mode.auto
	SEND eaves.redWhiteBlue		// Lights on all night
  AT sunset ON mondays FROM june 1 THROUGH july 13 	// on specific days within a date range
	WITH mode.auto
	SEND eaves.blue				// Lights on monday night
  AT midnight 
	THEN eaves.off				// Nothing after midnight
  AT sunset ON july 4th 
	WITH mode.auto
	THEN eaves.redWhiteBlue
  AT sunset ON december 24th OR sunset ON december 25th
	WITH mode.auto
	THEN eaves.christmasEve
  AT sunset DURING december 	// during == the whole whatever
	WITH mode.auto
	THEN eaves.christmas
  AT sunset FROM december 1st THROUGH january 6th 
	WITH mode.auto
	THEN eaves.christmas
  AT 1 hour before sunset ON easter 
	WITH mode.auto
	THEN eaves.pastel
  AT sunset 
	WITH mode.auto
	THEN eaves.redEyes
  AT OTHERWISE 
  	THEN eaves.off						// If nothing else qualifies, then lights off

// The message we receive tells us which lights to show
// Either controlled by the scheduler or manually
UNIT eaves
  ON eaves.off
    THEN 
  ON eaves.christmas
    THEN 

UNIT eaves
  ON eaves.christmas
	
UNIT lamp3		// Lamp that has auto mode that turns light on in the evening
	SUBSCRIBE calendar.sun{sunset,sunrise}		// Info from a system unit (calendar)
    SUBSCRIBE system.clock {evening} AS clock
	PUBLISH lamp3.mode{off,auto,on} AS mode
    ON lamp3.toggle
      THEN next(mode)
    ON lamp3.on
      THEN mode.on
    ON lamp3.auto
      THEN mode.auto
    ON lamp3.off
      THEN mode.off
	PUBLISH lamp3.state{off,on} AS state
	WHILE mode.auto AND clock.evening
	  THEN state.on
	WHILE mode.auto AND NOT clock.evening
	  THEN state.off

// Tank level and pump control
// Maintain a mode setting, too
UNIT tank1 {level(percent),off,auto}
	ON mode {off,auto}
	PUBLISH pump1 {on,off}						// We publish this variable as it changes
	LOCAL count 0								// Only used within this unit
	WHEN mode.auto AND level < 0.7 AND pump1.off 
	  THEN pump1.on
	WHEN mode.auto AND level > 0.9 AND pump1.on
	  THEN pump1.off
	WHEN mode.off AND pump1.on
	  THEN pump1.off

// Pump used to fill tank1, we list for the call
UNIT pump1
	ON ENUM tank1.pump1 {on,off}
	LOCAL ENUM state {off, on}
	WHEN event.on AND state.off THEN state.on
	WHEN event.off AND state.on THEN state.off
	PUBLISH ENUM 
	WHEN state THEN send.state.${server}/pump1

  
UNIT lamp1a		// This names the thing and can be referenced within by $(unit)
  state off,on
  mode on, off
  event next,on,off		// resolves to lamp1.event.next, lamp1.event.on, in this unit
  WHEN event.next THEN mode.next
  WHEN event.on THEN mode.on
  WHEN event.off THEN mode.off
  WHEN mode.on AND state.off THEN state.on
  WHEN mode.off AND state.on THEN state.off


// All units derive from this, ABSTRACT means the unit can't receive events
ABSTRACT UNIT %all
  SEND state to $(server)$(unit)

// Nothing happens until an event arrives. The event is fully processed before the next event is processed.
// No data is returned by an event submission: The submission is asynchronous.

// The WHEN list is processed in top-down order. Once a state or level is changed, it doesn't change again for the current event.
// When a variable value changes, the new value is used on subsequent "whens"
// Likewise, the previous value is used when it is referenced before the when that changed it

// Anything controlled by an on-off (or next) type event
ABSTRACT UNIT onoff
  state off,on
  event next,on,off		// implies $(unit).event.next $(unit).event.on, etc which resolves to lamp1.event.next, lamp1.event.on, etc
  WHEN event.next THEN NEXT state
  WHEN event.on AND !state.on THEN state.on
  WHEN event.off AND !state.off THEN SET state = off // Same as state.off
  SEND state to $(server)$(unit)

ABSTRACT UNIT tank
  SEND level to $(server)$(unit)

// Simple on-off-toggle using LIKE 
UNIT lamp1 LIKE onoff		// This names the thing and can be referenced within by $(unit)

// On-off-toggle with an off-timer after on for 30 minutes
// Builds on lamp1 configuration. Notice that the send (from lamp1) will now go to ...lamp2
UNIT lamp2 LIKE lamp1 {
  +WHEN state.on THEN delay 30min, state.off // Add this to the end of the list of whens
  
// Remove support for next in this variant of lamp1
UNIT lamp2a LIKE lamp1 {
  REMOVE EVENT next
  REMOVE WHEN event.next
  
// Remove support for on and off events in this derivation of lamp1
UNIT lamp2b LIKE lamp1 {
  -event on, off		// Remove these two events
  -WHEN event.on and !state.on	// To match, must be the exact (semantic) same condition as in lamp1

// Override event "on" behavior
UNIT lamp2c LIKE lamp1
  ADD STATE junk
  WHEN event.on and NOT state.on 
  	THEN state.off
  	THEN state.junk

// On-off-toggle with an off-timer after 30 minutes on, with motion sensor that resets the timer
// Builds on lamp2 configuration
// Note that on event and movement event reset the timer
UNIT lamp3 LIKE lamp2
  event movement
  WHEN state.on 
    THEN delay 40min state.off
  WHEN event.movement and state.on 
    THEN delay 30min state.off

// Reference the state of another unit
// Cause this lamp to follow the state of lamp1
UNIT lamp4 {
  state off,on
  REFERENCE lamp1
  WHEN lamp1.state.on 
    THEN state.on
  WHEN lamp1.state.off 
    THEN state.off
}

// Similar to lamp4 but different syntax
// We can simply copy the state without concern for the value
UNIT lamp5 {
  state off,on
  REFERENCE lamp1
  WHEN lamp1.state THEN state
}

// Introduce mode setting in addition to state
// Notice events affect mode rather than state
// In auto mode, light on at sunset and off at sunrise
UNIT lamp6 {
  state off,on
  mode mode,auto,on
  event mode-next
  REFERENCE clock
  WHEN event.mode-next THEN next mode
  WHEN mode.on THEN state.on
  WHEN mode.off THEN state.off
  WHEN mode.auto and clock.event.sunset and state.off THEN state.on
  WHEN mode.auto and clock.event.sunrise and state.on THEN state.off
}

// In auto mode, light on at night and off during the day
// This style is more durable than lamp6: if we miss sunrise or sunset event, the correct action still occurs
// because decision based on clock state rather than a clock event.
UNIT lamp7 
  state off,on
  mode off,auto,on
  event next
  REFERENCE clock
  WHEN event.next THEN next mode
  WHEN mode.on THEN state.on
  WHEN mode.off THEN state.off
  WHEN mode.auto and clock.state.night and state.off THEN state.on
  WHEN mode.auto and clock.state.day and state.on THEN state.off


// Notice shorthands
UNIT lamp8 {
  state off,on
//  ... state.on ... is shorthand for lamp8.state.on
// either form can be used
// When referencing another thing, the long form is required.
}

// REFERENCE key word allows a unit to access another unit
// lhs of THEN is always a condition, rhs is a setting
// for example, 
//    state.on THEN state.off
// means: if state *is* on, then *set* state to off


// Show business
// Implied priority, first setting of a state wins, all the rest (for that variable) are ignored
// Therefore, lowest priority is at the bottom
UNIT show1
	mode auto,manual
	state off,redeyes,christmas,christmasday
	event *state // same events as states
	WHEN event THEN state, mode-manual, delay 30min mode-auto
	WHEN mode.auto AND clock.night AND clock.date == 12/25 THEN state.christmasday
	WHEN mode.auto and clock.date >= 12/1 and clock.date < 1/6 THEN state.christmas
	WHEN mode.auto and clock.night THEN state.redeyes 
	WHEN mode.auto and clock.day THEN state.off

UNIT thermostat1
	EVENT temperature,setpoint
	LEVEL temperature,setpoint
	MODE off,auto
	STATE on,off
	REFERENCE fanUnit1,heater1
	WHEN event.temperature THEN level.temperature 
	WHEN event.setpoint THEN level.setpoint
	WHEN mode.off THEN state.off
	WHEN mode.auto AND level.temperature < (setpoint-5) THEN state.on
	WHEN level.temperature > (setpoint+2) THEN state.off
	WHEN state.on AND heater1.state.off THEN heater1.event.on
	WHEN state.off AND heater1.state.on THEN heater1.event.off
	WHEN state.off AND fanUnit1.state.on AND fanUnit1.mode.auto THEN fanUnit1.event.off
	WHEN state.on AND fanUnit1.state.off THEN delay 5min fanUnit.event.on
	
UNIT heater1 LIKE onoff
	
UNIT fanUnit1 LIKE onoff
	