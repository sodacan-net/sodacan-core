package net.sodacan.rules;
import net.sodacan.rules.Event;
import net.sodacan.rules.Connect;
global net.sodacan.rules.Container container;
declare Sensor
 	name : String @position(0);	
	level : double @position(1);
	trend: double @position(2);
end

declare Pump
 	name : String @position(0);	
	onAt : double @position(1);
	offAt: double @position(2);
	state: boolean @position(3);
end

declare Relay
 	name : String @position(0);	
end

rule "Configure pump"
  then
  	container.log( "Configure pump" );
  	insert( new Sensor( "sensor1", 0.0,0.0));
  	insert( new Pump( "pump1", 60, 70, false));
  	insert( new Connect("sensor1", "pump1"));
//  	insert( new Relay("relay1"));
//  	insert( new Connect("pump1", "relay1"));
end

rule "Turn pump on if below low level"
when
  Connect($eventName: fromDev, $pumpName: toDev)
  $pump: Pump( name==$pumpName, state==false, $onAt: onAt)
  $a: Double(doubleValue < $onAt) from accumulate(
    Event(name==$eventName, $level : value) over window:time(10s) from entry-point Events,
    average($level)) 
then
    modify($pump) {setState(true)};
  	container.log("onAt=" + $a);
end

rule "Turn pump off if above high level"
when
  Connect($eventName: fromDev, $pumpName: toDev)
  $pump: Pump( name==$pumpName, state==true, $offAt: offAt)
  $a: Double(doubleValue > $offAt) from accumulate(
    Event(name==$eventName, $level : value) over window:time(10s) from entry-point Events,
    average($level)) 
then
    modify($pump) {setState(false)};
  	container.log("offAt=" + $a);
end

rule "Trend of levels"
when
  $sensor: Sensor($sensorName: name)
  $a: Double() from accumulate(
    Event(name==$sensorName, $level : value) over window:time(15s) from entry-point Events,
    average($level)) 
  $b: Double() from accumulate(
    Event(name==$sensorName, $level : value) over window:time(5s) from entry-point Events,
    average($level)) 
then
    modify($sensor) {setLevel($a)};
	if (Math.abs($a-$b) < 1.0) {
		modify($sensor) {setTrend(0.0)};
	  	container.log("Static: a=" + $a + " b=" + $b);
	}
	else if ($a>$b) {
		modify($sensor) {setTrend(-1.0)};
	  	container.log("decrease: a=" + $a + " b=" + $b);
	} else {
		modify($sensor) {setTrend(1.0)};
	  	container.log("Increase: a=" + $a + " b=" + $b);
	}
end

rule "Emulate a device"
  when
    Connect($fromName: fromDev, $toName: toDev)
  	Pump(name==$fromName, $state: state)
  	Relay(name==$toName)
  then
  	container.log("Pump:" + $fromName + " state=" + $state);
end

rule "show pump state change"
  when
  	Pump($name: name, $state: state)
  then
  	container.log("Pump:" + $name + " state=" + $state);
end
