package net.sodacan.rules;
import net.sodacan.rules.Event;
import net.sodacan.rules.Sender;
import net.sodacan.rules.Tick;
import net.sodacan.rules.State;
import net.sodacan.rules.Countdown;
global org.apache.logging.log4j.Logger logger;

declare Switch
	event: String @position(0);
	state: String @position(1);
	fromValue: String @position(2);
	toValue: String @position(3);
end

declare Reflex
	whenEvent: String @position(0) @key;
	thenEvent: String @position(1) @key;
end

// Use InsertLogical for this fact
declare DeferredEvent
	state: String @position(0) @key;
	value: String @position(1) @key;
	event: String @position(2) @key;
	time: String @position(3);
end

declare DeferredEventSender
	event: String @position(0) @key;
	time: String @position(1);
end

declare TankLevel
	event: String @position(0);
	state: String @position(1);
	pump: String @position(2);
	onAt: double @position(3);
	offAt: double @position(4);
end

/**
* When state goes to fromValue, start a timer that sends an event when timer expires
*/
declare Timer
 	state : String @position(0);
	fromValue: String @position(1);
	time: int @position(2);
	toValue: String @position(3);
end

/**
* If a specified event, usually motion detector, occurs, reset the timer
*/
declare ResetCountdown
 	state : String @position(0);
	event: String @position(1);
	time: int @position(2);
end

declare Send
 	state : String @position(0);	
	url: String @position(1);
end

declare Proposal
 	name : String @key @position(0);	
	priority: int @position(1);
	show: String @key @position(2);
end

rule "match on event"
	salience 20
  when
  	Event($n: name)
  then
  	logger.debug("Event arrived: " + $n );
  end
 
 rule "match on event done"
	salience -20
  when
  	Event($n: name)
  then
  	logger.debug("Event done: " + $n );
  end

rule "Show Clock"
  when
	Tick($t:now)
  then
  	logger.debug("Time: " + $t );
end

rule "Handle reflexive events"
  when
  	Reflex($we: whenEvent, $te: thenEvent)
  	Event(name==$we)
  then
  	sender.event(new Event($te,null));
end

rule "Handle deferred events"
  when
	DeferredEvent($s: state, $v:value, $e: event, $t:time)
	State(name==$s, value==$v)
  then
  	insertLogical(new DeferredEventSender($e,$t));
end

rule "Send deferred event when it comes due"
	when
		DeferredEventSender($e: event, $t: time)
		Event(name==$t)
	then
		sender.event(new Event($e,""));
end

query "All states"
	  $state: State()
end

query "All Countdowns"
	  $c: Countdown()
end