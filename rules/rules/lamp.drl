package net.sodacan.rules;
import net.sodacan.rules.Event;
import net.sodacan.rules.State;
import net.sodacan.rules.Countdown;

global net.sodacan.rules.Sender sender;
global net.sodacan.rules.StateStore stateStore;
global org.apache.logging.log4j.Logger logger;

rule "initialize lamp1"	
  then
	// Create a lamp
  	insert(new State("lamp1","off"));

  	insert(new State("lamp2","off"));

	// When a state value changes, send it to this url
  	insert(new Send("lamp1","http://lamp1-device1/"));
  	insert(new Send("lamp1","http://lamp1-device2/"));
	
	// Same event for on and off means it's a toggle  	
  	insert(new Switch("button1","lamp1","off","on"));
  	insert(new Switch("button1","lamp1","on","off"));

	// A simple switch uses two events
  	insert(new Switch("lighton","lamp1","off","on"));
  	insert(new Switch("lightoff","lamp1","on","off"));
	
  	insert(new Switch("lamp2on","lamp2","off","on"));
  	insert(new Switch("lamp2off","lamp2","on","off"));

	// On at sunset, off at sunrise
	insert(new Reflex("sunset","lamp2on"));
	insert(new Reflex("sunrise","lamp2off"));
	insert(new Reflex("sunrise","lightoff"));

	// The lamp is turned off after 3 ticks
//  	insert(new Timer("lamp1","on",3,"off"));

	insert(new DeferredEvent("lamp1","on","lightoff","3min"));
	
	// Timer for state is reset usually due to motion detector
	insert(new ResetCountdown( "lamp1", "motion", 3 ));
	
end

rule "Send state to url"
  when
  	State($n: name, $v: value)
	Send(state==$n, $u: url)
  then
  	sender.send($u, $v);
end

rule "Light on(off) turns State off(on)"
	lock-on-active true
  when
  	Switch($en: event, $sn: state, $fv: fromValue, $tv: toValue)
  	$s: State(name==$sn,value==$fv)
  	$e: Event(name==$en)
  then
    $s.setValue($tv);
    update($s);
end

rule "Start a timer when the specified state has the specified value"
  when
  	Timer($sn: state, $t: time, $fv: fromValue, $tv: toValue)
  	State(name==$sn, value==$fv)
  then
  	insertLogical(new Countdown($sn,$t, $t, $tv));
end

rule "Decrement timer"
	lock-on-active true
  when
  	$e: Tick()
  	$t: Countdown($tv: time)
  then
  	logger.debug("Decrement timer");
    $t.setTime($tv-1);
    update($t);
end

rule "Reset timer"
	lock-on-active true
  when
  	$r: ResetCountdown($s: state, $e: event, $t: time)
  	$tw: Countdown(state==$s)
  	Event(name==$e)
  then
  	logger.debug("Reset timer");
    $tw.setTime($t);
    update($tw);
end

rule "If timer expires, change state (turn light off)"
  when
  	$tw: Countdown(time == 0, $sn: state, $tv: toValue)
  	$s: State(name==$sn)
  then
  	logger.debug("Turn off lamp");
    $s.setValue($tv);
    update($s);
end

